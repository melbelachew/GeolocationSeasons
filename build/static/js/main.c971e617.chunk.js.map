{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","autumn","spring","SeasonDisplay","props","lat","month","season","Date","getMonth","console","log","className","toLocaleDateString","toTimeString","toFixed","long","style","fontStyle","Spinner","message","defaultProps","App","state","errMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"0MAGMA,G,MAAe,CACjBC,OAAO,CACHC,KAAK,yFACLC,SAAU,OAEdC,OAAO,CACHF,KAAM,0DACNC,SAAU,aAEdE,OAAO,CACHH,KAAM,gEACNC,SAAU,QAEdG,OAAO,CACHJ,KAAM,2BACNC,SAAU,WA2CHI,EApBO,SAACC,GAEnB,IApBeC,EAAKC,EAoBdC,GApBSF,EAoBUD,EAAMC,KApBXC,GAoBgB,IAAIE,MAAOC,aAnBlC,IAAMH,GAAQ,EAChBD,EAAM,EAAI,SAAW,SAGxBC,GAAQ,GAAKA,GAAQ,EAClBD,EAAM,EAAG,SAAW,SAGvBC,GAAQ,GAAKA,GAAQ,EAClBD,EAAM,EAAG,SAAW,SAGpBA,EAAM,EAAI,SAAW,UAQhCK,QAAQC,IAAIJ,GAHiB,MAINX,EAAaW,GAA9BT,EAJuB,EAIvBA,KAAMC,EAJiB,EAIjBA,SAEZ,OACI,yBAAKa,UAAS,yBAAsBL,IACjC,uBAAGK,UAAS,4BAAuBb,EAAvB,WACX,yBAAKa,UAAY,gBACb,sCAAW,IAAIJ,MAAOK,qBAAtB,WAAmD,IAAIL,MAAOM,gBAC9D,qEAAoCV,EAAMC,IAAIU,QAAQ,GAAtD,uBAAuEX,EAAMY,KAAKD,QAAQ,KAC1F,wBAAIE,MAAO,CAACC,UAAU,WAAYpB,IAEtC,uBAAGc,UAAS,6BAAwBb,EAAxB,aCrDlBoB,EAAU,SAACf,GACb,OACI,yBAAKQ,UAAU,oBACX,yBAAKA,UAAU,sBAAsBR,EAAMgB,WAKvDD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCTTG,E,2MAEFC,MAAM,CAAClB,IAAK,KAAMW,KAAM,KAAMQ,WAAW,I,mFAErB,IAAD,OACfC,OAAOC,UAAUC,YAAYC,mBAEzB,SAAAC,GAAanB,QAAQC,IAAIkB,GAAW,EAAKC,SAAS,CAACzB,IAAKwB,EAASE,OAAOC,SAAUhB,KAAMa,EAASE,OAAOE,aACxG,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAAEN,WAAYU,EAAId,c,sCAO3C,OADAV,QAAQC,IAAIwB,KAAKZ,OACbY,KAAKZ,MAAMlB,MAAQ8B,KAAKZ,MAAMC,WACvB,kBAAC,EAAD,CAAenB,IAAK8B,KAAKZ,MAAMlB,IAAKW,KAAMmB,KAAKZ,MAAMP,QAE3DmB,KAAKZ,MAAMlB,KAAO8B,KAAKZ,MAAMC,WACvB,uCAAaW,KAAKZ,MAAMC,YAE5B,kBAAC,EAAD,CAASJ,QAAQ,qC,+BAI5B,OACI,6BACCe,KAAKC,qB,GA3BIC,IAAMC,WAiCxBC,IAASC,OACL,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.c971e617.chunk.js","sourcesContent":["import './SeasonDisplay.css'\nimport React from 'react';\n\nconst seasonConfig = {\n    summer:{\n        text:\"\\\"Sun is shinging. Weather is sweet. Make you wanna move your dancing feet.\\\" Bob Marely\",\n        iconName: 'sun'\n    },\n    winter:{\n        text: 'It\\'s winter season. Hot cocoa and cosy blankets please!',\n        iconName: 'snowflake'\n    },\n    autumn:{\n        text: 'It\\'s autumn season. Enjoy the crisp air & the smell of cider!',\n        iconName: 'leaf'\n    },\n    spring:{\n        text: 'Yay! It\\'s spring season!',\n        iconName: 'smile'\n    }\n}\n\n\nconst getSeason = (lat, month) => {\n    if (month >= 11 && month <=1) {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n    \n    else if(month >=2 && month <=4){\n        return lat > 0? 'spring' : 'autumn'  \n    }\n\n    else if(month >=5 && month <=7){\n        return lat > 0? 'summer' : 'winter'    }\n    \n    else {\n        return lat > 0 ? 'autumn' : 'spring'\n    }\n\n}\n\nconst SeasonDisplay = (props) => {\n\n    const season = getSeason(props.lat, new Date().getMonth());\n    console.log(season)\n   const {text, iconName}= seasonConfig[season];\n\n    return (\n        <div className = {`season-display ${season}`}>\n           <i className={`icon-left massive ${iconName} icon`}/>\n            <div className = \"ui container\">\n                <h3>Date: {new Date().toLocaleDateString()} Time: {new Date().toTimeString()}</h3>\n                <h3>Current Position: {`Latitude: ${props.lat.toFixed(2)} Longitude: ${props.long.toFixed(2)}`}</h3> \n                <h3 style={{fontStyle:'italic'}}>{text}</h3>\n            </div>\n            <i className={`icon-right massive ${iconName} icon`}/>\n        </div>\n    );\n}\n\n\nexport default SeasonDisplay","import React from 'react'\n\nconst Spinner = (props)=>{\n    return(\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">{props.message}</div>\n        </div>\n    );\n}\n\nSpinner.defaultProps = {\n    message: 'loading...'\n}\n\nexport default Spinner ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from \"./Spinner\";\n\nclass App extends React.Component {\n\n    state={lat: null, long: null, errMessage:''}\n\n    componentDidMount(){\n        window.navigator.geolocation.getCurrentPosition(\n            \n            position => {console.log(position); this.setState({lat: position.coords.latitude, long: position.coords.longitude})},\n            err => this.setState({ errMessage: err.message }) \n        )\n    };\n    \n\n    renderContent(){\n        console.log(this.state)\n        if (this.state.lat && !this.state.errMessage) {\n            return <SeasonDisplay lat={this.state.lat} long={this.state.long}/>\n        }\n        if (!this.state.lat && this.state.errMessage) {\n            return <div>Error: {this.state.errMessage}</div>\n        }\n        return <Spinner message=\"Please accept location request\"/>\n    }\n    \n    render() {\n    return(\n        <div>\n        {this.renderContent()}\n        \n        </div>\n    )\n}\n}\nReactDOM.render(\n    <App />, document.querySelector(\"#root\")\n)"],"sourceRoot":""}